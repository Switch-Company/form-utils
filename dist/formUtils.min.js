/**
 * @switch-company/form-utils - Convenience methods for form datas
 * @version v1.0.1
 * @link undefined
 * @license ISC
 **/
!function(r,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):r.formUtils=t()}(this,function(){"use strict";var r=function(){return function(r,t){if(Array.isArray(r))return r;if(Symbol.iterator in Object(r))return function(r,t){var e=[],n=!0,o=!1,i=void 0;try{for(var u,a=r[Symbol.iterator]();!(n=(u=a.next()).done)&&(e.push(u.value),!t||e.length!==t);n=!0);}catch(r){o=!0,i=r}finally{try{!n&&a.return&&a.return()}finally{if(o)throw i}}return e}(r,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();function t(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=new FormData(t),o={},i=!0,u=!1,a=void 0;try{for(var f,l=n[Symbol.iterator]();!(i=(f=l.next()).done);i=!0){var c=f.value,y=r(c,2),s=y[0],d=y[1];if((!e||"string"==typeof d)&&("File"!==d.constructor.name||0!==d.size))if(o[s]){if(Array.isArray(o[s])){o[s].push(d);continue}o[s]=[o[s],d]}else o[s]=d}}catch(r){u=!0,a=r}finally{try{!i&&l.return&&l.return()}finally{if(u)throw a}}return o}var e=window.encodeURIComponent;return{toJSON:t,toQuery:function(r){var n=t(r,!0);return Object.keys(n).map(function(r){return Array.isArray(n[r])?n[r].map(function(t){return e(r)+"="+e(t)}).join("&"):e(r)+"="+e(n[r])}).join("&")},hasFile:function(r){return Array.from(r.elements).some(function(r){return"file"===r.type&&r.files.length>0})}}});
